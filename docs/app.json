[{"name": "app.py", "content": "import plotly.express as px\nimport seaborn as sns\nfrom shiny.express import input, ui\nfrom shiny import render\nfrom shinywidgets import render_plotly\nimport palmerpenguins\nfrom shiny import reactive, render, req\nimport shinyswatch\n\n# Theme\nshinyswatch.theme.superhero()\n\n# Built-in function to load the penguin dataset\npenguins_df = palmerpenguins.load_penguins()\n\n# Title for chart\nui.page_opts(title=\"Nollettecs Penguins\", fillable=True)\n\n# Add a Shiny UI sidebar for user interaction\nwith ui.sidebar(open=\"open\"):\n\n    # Use the ui.h2() function to add a 2nd level header to the sidebar\n    # pass in a string argument (in quotes) to set the header text to \"Sidebar\"\n    ui.h2(\"Sidebar\")\n\n    # Use ui.input_selectize() to create a dropdown input to choose a column\n    ui.input_selectize(\"selected_attribute\", \"Selected Attribute\",\n                       [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"])\n    \n    # Use ui.hr() to add a horizontal rule to the sidebar\n    ui.hr()\n\n    # Use ui.input_numeric() to create a numeric input for the number of Plotly histogram bins\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Bin Count\", 15)\n\n    # Use ui.hr() to add a horizontal rule to the sidebar\n    ui.hr()\n\n    # Use ui.input_slider() to create a slider input for the number of Seaborn bins\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bin Count\", 0, 100, 30)\n\n    # Use ui.hr() to add a horizontal rule to the sidebar\n    ui.hr()\n\n    # Use ui.input_checkbox_group() to create a checkbox group input to filter the species\n    ui.input_checkbox_group(\"selected_species_list\", \"Species\",\n                            [\"Adelie\", \"Gentoo\", \"Chinstrap\"], selected=[\"Adelie\",\"Gentoo\", \"Chinstrap\"])\n\n    # Use ui.input_checkbox() to create a checkbox to show the sex\n    ui.input_checkbox(\"show_sex\", \"Show Sex\")\n\n    # Use ui.hr() to add a horizontal rule to the sidebar\n    ui.hr()\n\n    # Use ui.a() to add a hyperlink to the sidebar\n    ui.a(\"GitHub\", href=\"https://github.com/nollettecs/cintel-02-data\", target=\"_blank\")\n\n# Data Content\n\n# Data Table and Data Grid\nwith ui.layout_columns():\n    with ui.accordion(id=\"acc\", open=\"open\"):\n        with ui.accordion_panel(\"Data Table\"):\n            @render.data_frame\n            def penguin_datatable():\n                return render.DataTable(filtered_data())\n\n        with ui.accordion_panel(\"Data Grid\"):\n            @render.data_frame\n            def penguin_datagrid():\n                return render.DataGrid(filtered_data())\n\n# Display Plotly histogram\nwith ui.navset_card_tab(id=\"tab\"):\n    with ui.nav_panel(\"Plotly Histogram\"):\n\n        @render_plotly\n        def plotly_histogram():\n            plotly_hist = px.histogram(\n                data_frame=filtered_data(),\n                x=input.selected_attribute(),\n                nbins=input.plotly_bin_count(),\n                color=\"species\",\n            ).update_layout(\n                title=\"Plotly Penguins Data\",\n                xaxis_title=\"Selected Attribute\",\n                yaxis_title=\"Count\",\n            )\n            \n            return plotly_hist\n\n# Display Seaborn histogram    \n    with ui.nav_panel(\"Seaborn Histogram\"):\n        @render.plot\n        def seaborn_histogram():\n            histplot = sns.histplot(data=filtered_data(), x=\"body_mass_g\", bins=input.seaborn_bin_count())\n            histplot.set_title(\"Palmer Penguins\")\n            histplot.set_xlabel(\"Mass\")\n            histplot.set_ylabel(\"Count\")\n            sns.set_style('darkgrid')\n            return histplot\n\n# Display Plotly Scatterplot\n    with ui.nav_panel(\"Plotly Scatterplot\"):\n        ui.card_header(\"Plotly Scatterplot: Species\")\n\n        @render_plotly\n        def plotly_scatterplot():\n            return px.scatter(\n                filtered_data(),\n                x=\"body_mass_g\",\n                y=\"bill_length_mm\",\n                color=\"species\",\n                 color_discrete_map={\n                     'Adelie': 'blue',\n                     'Chinstrap': 'green',\n                     'Gentoo': 'red'},\n            )\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n@reactive.calc\ndef filtered_data():\n    return penguins_df[penguins_df[\"species\"].isin(input.selected_species_list())]\n", "type": "text"}]